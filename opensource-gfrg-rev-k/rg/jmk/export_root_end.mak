# We create the target directory because it might not exist yet.
# We check whether to create the link to the SRC or the BUILD dir, usually the
# target of the link is in the source directory, but autogenerated files are in
# BUILD directory.
# $1 - source
# $2 - destination
EXPORT_FILE=$(JMKE_MKDIR) $(dir $2) && \
  $(JMKE_LN) $(if $(wildcard $1),$1,$(call SRC2BUILD,$1)) $2

# same as EXPORT_FILE but don't allow build-dir as source
# protects against self referential link
EXPORT_INTERNAL_HEADER= \
  $(if $(wildcard $1), \
    $(JMKE_MKDIR) $(dir $2) && $(JMKE_LN) $1 $2)

EXPORT_FILE_CP=$(JMKE_MKDIR) $(dir $2) && \
  cp -fs $(if $(wildcard $1),$1,$(call SRC2BUILD,$1)) $2

# $1 - variable name
# $2 - variable prefix
Get_Dir_From = $(JMK_ROOT)/$(call Var_To_Path,$1,$2)
Get_Dir_To = $(RG_INCLUDE_DIR)/$(sav_JMK_EXPORT_HEADERS_DIR_$(1:$2%=%))

# $1 - files (in %__% format)
# $2 - source path
# $3 - destination path
Export_Headers= \
  $(foreach f,$1, \
    $(call EXPORT_FILE, $(call GET_FILE_FROM,$f,$2), \
      $3/$(call GET_FILE_TO,$f)) &&) true

# export_headers:
# see comment for ln_internal_headers
$(foreach v,\
  $(filter-out sav_JMK_EXPORT_HEADERS_FLAT% sav_JMK_EXPORT_HEADERS_DIR%, \
    $(filter sav_JMK_EXPORT_HEADERS_%, $(.VARIABLES))), \
  $(eval export_headers:: ; \
    $(call Export_Headers,$($v), \
      $(call Get_Dir_From,$v,sav_JMK_EXPORT_HEADERS_), \
      $(call Get_Dir_To,$v,sav_JMK_EXPORT_HEADERS_))))

# $1 - files (in %__% format)
# $2 - source path
# $3 - destination path
Export_Headers_Flat= \
  $(foreach f,$1, \
    $(call EXPORT_FILE_CP,$(call GET_FILE_FROM,$f,$2),$3/) &&)

export_headers_flat::
	$(foreach v,$(filter sav_JMK_EXPORT_HEADERS_FLAT_%, $(.VARIABLES)), \
	  $(call Export_Headers_Flat,$($v), \
	    $(call Get_Dir_From,$v,sav_JMK_EXPORT_HEADERS_FLAT_), \
	    $(call Get_Dir_To,$v,sav_JMK_EXPORT_HEADERS_FLAT_))) true
	    
export_libs::
	$(foreach f,$(sav_JMK_EXPORT_LIBS),\
	  $(call EXPORT_FILE,$f,$(JMKE_BUILDDIR)/pkg/lib/$(notdir $f)) &&) true

# ln_internal_headers:
#
# the trivial implementation of ln_internal_headers would be:
# ln_internal_headers:
# 	$(foreach f,..., \
# 	  $(call EXPORT_FILE,$f,...) &&) true
# the problem with this implementation is that the command gets too long for
# bash when running on a big enough input. the solution is to break it to many
# small bash runs.
# since shell activation is expensive, running a shell for every linked file
# hurts performance a little and one day maybe we should improve the cut here to
# run a shell for every n files.

$(foreach f, \
  $(sav_JMK_INTERNAL_HEADERS) \
  $(filter-out $(JMKE_BUILDDIR)/%, \
    $(sav_JMK_JS_FILES) $(sav_JMK_CSS_FILES) $(sav_JMK_SQL_FILES) \
    $(sav_JMK_CD_EXPORTED_FILES) $(export_headers_srcs)) \
    $(sav_JMK_JPKG_EXPORTED_FILES), \
  $(eval ln_internal_headers:: ; \
    $(call EXPORT_INTERNAL_HEADER,$f,$(call SRC2BUILD,$f))))

link_dirs::
	$(foreach d,$(sav_JMK_LINK_DIRS), \
	  $(if $(wildcard $d), \
	    $(JMKE_CP_LN) $d $(dir $(call SRC2BUILD,$d)) &&, \
	    $(if $(CONFIG_RG_GPL), \
              $(if ${debug_subdirs},$(warning JMK: skipping [$d])), \
	      $(error missing directory $d)))) true

export_tasks = export_headers export_headers_flat \
  $(if $(CONFIG_RG_JPKG_SRC),,export_libs) ln_internal_headers link_dirs
